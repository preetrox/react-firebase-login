{"version":3,"sources":["Login.js","firebase.js","LoggedIn.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","clickHandler","className","type","onClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","provider","auth","FacebookAuthProvider","LoggedIn","useState","employees","setEmployees","msg","updateMessage","show","setShow","employeeData","setEditEmployee","currentStep","setCurrentStep","useEffect","updateImage","img","details","updateEmployeeDetail","e","target","id","file","cb","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","getBase64","files","value","handleStepAction","actionType","handleSubmit","collection","doc","update","emps","empIndex","findIndex","emp","resetAll","scope","map","employee","employeeIndex","src","photoURL","height","width","alt","firstName","lastName","salary","phone","email","editEmployee","Modal","onHide","Header","closeButton","Title","Body","onChange","style","display","justifyContent","Button","color","disabled","Footer","variant","LogIn","loggedIn","setloggedIn","password","setUser","fetchEmployees","Promise","resolve","reject","get","then","snapshot","docs","forEach","data","push","signInWithPopup","user","name","displayName","split","newUser","phoneNumber","add","alert","catch","err","code","message","credential","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2f883be.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Login(props) {\n    const { clickHandler } = props;\n    return (\n        <div className=\"row justify-content-center\">\n        <div className=\"col-md-12  text-center login-con\">\n                <button type=\"button\" className=\"btn btn-primary p-4 \"\n                 onClick={clickHandler}\n                >LogIn with Facebook</button>\n            </div>\n        </div>\n    );\n}","import firebase from \"firebase/app\";\nimport \"firebase/firestore\"\n\nconst config = {\n  apiKey: \"AIzaSyAMSsMDqElf6DWMlmy1ZVZQNwhDmUf4M8w\",\n  authDomain: \"react-signup-71e62.firebaseapp.com\",\n  databaseURL: \"https://react-signup-71e62.firebaseio.com\",\n  projectId: \"react-signup-71e62\",\n  storageBucket: \"react-signup-71e62.appspot.com\",\n  messagingSenderId: \"864195551081\",\n  appId: \"1:864195551081:web:fc5c126dc256cc9d38a7f8\"\n};\n\nfirebase.initializeApp(config);\nexport const db = firebase.firestore();\nconst provider = new firebase.auth.FacebookAuthProvider();\nexport default provider;\n\n// Initialize Firebase\n\n// firebase.analytics();\n// export const db = firebase.firestore();","import React, { useState, useEffect } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { db } from './firebase';\n\n\nexport default function LoggedIn(props) {\n    const [employees, setEmployees] = useState(props.employees);\n    const [msg, updateMessage] = useState('');\n\n    const [show, setShow] = useState(false);\n    const [employeeData, setEditEmployee] = useState({});\n    const [currentStep, setCurrentStep] = useState(1);\n\n    useEffect(() => {\n        setEmployees(props.employees);\n    }, [props.employees]);\n\n\n    const handleClose = () => setShow(false);\n    const editEmployee = (employee) => {\n        setEditEmployee(employee);\n        setShow(true);\n    }\n\n    const getBase64 = (file, cb) => {\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n            cb(reader.result);\n        };\n        reader.onerror = function (error) {\n            console.log('Error: ', error);\n        };\n    }\n\n    const updateImage = (img) => {\n        let details = { ...employeeData };\n        details['photoURL'] = img;\n        setEditEmployee(details);\n    }\n\n    const updateEmployeeDetail = (e) => {\n        let details = { ...employeeData };\n        if (e.target.id === \"image\") {\n            getBase64(e.target.files[0], updateImage);\n        } else {\n            details[e.target.id] = e.target.value;\n            setEditEmployee(details);\n        }\n    }\n\n    const stepOne = () => {\n        return (\n            <>\n                <table className=\"table\">\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">First Name:- </th>\n                            <td>\n                                <input type=\"text\"\n                                    id=\"firstName\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Last Name:- </th>\n                            <td>\n                                <input type=\"text\"\n                                    id=\"lastName\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Email :- </th>\n                            <td>\n                                <input type=\"text\"\n                                    id=\"email\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Phone:- </th>\n                            <td>\n                                <input type=\"text\"\n                                    id=\"phone\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Salary:- </th>\n                            <td>\n                                <input type=\"text\"\n                                    id=\"salary\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </>\n        );\n    }\n\n\n    const stepTwo = () => {\n        return (\n            <>\n                <table className=\"table\">\n                    <tbody>\n                        <tr>\n                            <td>\n                                <img src={employeeData['photoURL']} alt=\"Profile Pic\" />\n                                <input type=\"file\"\n                                    id=\"image\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                /> Upload Image\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </>\n        );\n    }\n\n    const stepThree = () => {\n        return (\n            <>\n                <table className=\"table\">\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">Provide Password:- </th>\n                            <td>\n                                <input type=\"password\"\n                                    id=\"password\"\n                                    onChange={(e) => updateEmployeeDetail(e)}\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </>\n        );\n    }\n\n    const getCurrentSteplayout = () => {\n\n        if (currentStep === 1) {\n            return stepOne();\n        }\n        if (currentStep === 2) {\n            return stepTwo();\n        }\n        if (currentStep === 3) {\n            return stepThree();\n        }\n    }\n\n    const handleStepAction = (actionType) => {\n        // debugger;\n        if (currentStep >= 1 && currentStep <= 3) {\n            if (actionType === 'previous') {\n                return currentStep > 1 ? setCurrentStep(currentStep - 1) : '';\n            } else if (actionType === 'next') {\n                setCurrentStep(currentStep + 1);\n            }\n        }\n    }\n\n    const getButtons = () => {\n        if (currentStep === 1) {\n            return (\n                <Button color=\"Primary\"\n                    onClick={() => handleStepAction('next')}\n                >Next</Button>\n            );\n        }\n        if (currentStep === 2) {\n            return (\n                <>\n                    <Button color=\"Primary\"\n                        onClick={() => handleStepAction('previous')}\n                    >Previous</Button>\n                    <Button color=\"Primary\"\n                        onClick={() => handleStepAction('next')}\n                    >Next</Button>\n                </>\n            );\n        }\n        if (currentStep === 3) {\n            return (\n                <>\n                    <Button color=\"Primary\"\n                        onClick={() => handleStepAction('previous')}\n                    >Previous</Button>\n                    <Button color=\"Primary\"\n                        onClick={() => { handleSubmit() }}\n                        disabled={msg === \"Wait while we are processing your request...\" ? true : false}\n                    > Update Details </Button>\n                </>\n            );\n        }\n    }\n\n\n\n    const handleSubmit = () => {\n        updateMessage('Updating...');\n        db.collection(\"employees\").doc(employeeData.id).update({ ...employeeData });\n        // make copy of employees from state \n        let emps = [...employees];\n        // find which record to update \n        let empIndex = emps.findIndex((emp) => {\n            return emp.id === employeeData.id;\n        });\n        // update particular index with new data of employee\n        emps[empIndex] = { ...employeeData };\n        setEmployees(emps);\n\n        resetAll();\n        updateMessage('Record has been updated successfully...');\n    }\n\n    const resetAll = () => {\n        setCurrentStep(1);\n        setEditEmployee({});\n        handleClose();\n    }\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"container-table100\">\n                    <div className=\"wrap-table100\">\n                        <div className=\"table100 ver1 m-b-110\">\n                            <div className=\"table100-head\">\n                                <table className=\"table table-striped\">\n                                    <thead>\n                                        <tr>\n                                            <th scope=\"col\">Avatar</th>\n                                            <th scope=\"col\">First Name</th>\n                                            <th scope=\"col\">Last Name</th>\n                                            <th scope=\"col\">Salary</th>\n                                            <th scope=\"col\">Phone</th>\n                                            <th scope=\"col\">Email</th>\n                                            <th scope=\"col\">Update</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {\n                                            employees.map((employee, employeeIndex) => {\n                                                return (\n                                                    <tr>\n                                                        <td>\n                                                            <img src={employee.photoURL} height=\"100\" width=\"100\" alt=\"Facebook Profile Pic\" />\n                                                        </td>\n                                                        <td>{employee.firstName}</td>\n                                                        <td>{employee.lastName}</td>\n                                                        <td>{employee.salary}</td>\n                                                        <td>{employee.phone}</td>\n                                                        <td>{employee.email}</td>\n                                                        <td>\n                                                            <span >\n                                                                <button type=\"button\" onClick={() => editEmployee(employee)}\n                                                                    className=\"btn btn-outline-primary btn-rounded btn-sm \">EDIT</button>\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                );\n                                            })}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <Modal show={show} onHide={resetAll}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Employee</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h2>{msg}</h2>\n                    {\n                        getCurrentSteplayout()\n                    }\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n\n                        {\n                            getButtons()\n                        }\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={resetAll}>\n                        Close\n          </Button>\n\n                </Modal.Footer>\n            </Modal>\n\n\n\n\n\n            <Modal show={msg === '' ? false : true} onHide={() => updateMessage('')}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Success</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h1>{msg}</h1>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => updateMessage('')}>\n                        Close\n          </Button>\n\n                </Modal.Footer>\n            </Modal>\n        </>\n\n\n    );\n}","import React, { useState } from 'react';\nimport './App.css';\n\n\nimport firebase from 'firebase';\n\nimport Login from './Login';\nimport LoggedIn from './LoggedIn';\nimport provider, { db } from './firebase';\n\n\n\nfunction LogIn() {\n  const [loggedIn, setloggedIn] = useState(false);\n  const [employees, setEmployees] = useState([]);\n  const [user, setUser] = useState({\n    firstName: '',\n    lastName: '',\n    phone: '',\n    salary: '',\n    password: '',\n    email: '',\n    photoURL: 'https://www.bsn.eu/wp-content/uploads/2016/12/user-icon-image-placeholder.jpg'\n  });\n\n  // useEffect(() => {\n  //   fetchEmployees();\n  // }, []);\n\n\n\n  function facebookLogin() {\n\n    firebase.auth().signInWithPopup(provider)\n      .then(function (result) {\n\n        fetchEmployees()\n          .then((emps) => {\n            let userIndex = emps.findIndex((emp) => {\n              return emp.email === result.user.email;\n            });\n            if (userIndex === -1) {\n              var user = result.user;\n              let name = user.displayName.split(' ');\n              let newUser = {\n                firstName: name[0],\n                lastName: name[1],\n                phone: user.phoneNumber ? user.phoneNumber : '',\n                salary: '',\n                password: '',\n                email: user.email,\n                photoURL: user.photoURL\n              };\n              db.collection('employees').add(newUser);\n              fetchEmployees().then(emps => setEmployees(emps));\n              setUser(newUser);\n              setloggedIn(true);\n            } else {\n              setEmployees(emps);\n              alert('User already exists in our database');\n              setloggedIn(true);\n            }\n          })\n          .catch(err => console.error(`Error while fetching employees ${err}`));\n        ;\n\n\n        // ...\n      }).catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n        // ...\n      });\n  }\n\n\n  function fetchEmployees() {\n    return new Promise((resolve, reject) => {\n      let emps = [];\n      db.collection('employees').get()\n        .then(snapshot => {\n          snapshot.docs.forEach(employee => {\n            let emp = { ...employee.data(), id: employee.id };\n            emps.push(emp);\n          })\n          resolve(emps);\n        })\n    });\n  }\n\n\n  return (\n    <div className=\"container\">\n      {\n        loggedIn ? <LoggedIn employees={employees} /> : <Login clickHandler={facebookLogin} />\n      }\n\n    </div>\n  );\n}\n\nexport default LogIn;\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}